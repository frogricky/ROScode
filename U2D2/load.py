# -*- coding: utf-8 -*-
"""
Created on Sat Oct 14 02:54:03 2023

@author: HungYing
"""


'''
ID4 3100,1050
ID5 2800,1800
ID1 3072,1024
ID2 2000,900
ID3 3000,800
'''


try:
    import time
    
    from dynamixel_sdk import * # Uses Dynamixel SDK library
    
    import os
    
    if os.name == 'nt':
        import msvcrt
        def getch():
            return msvcrt.getch().decode()
    else:
        import sys, tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        def getch():
            try:
                tty.setraw(sys.stdin.fileno())
                ch = sys.stdin.read(1)
            finally:
                termios.tcseattr(fd, termios.TCSADRAIN, old_settings)
            return ch
    
    
    '''
    integers = [3114,1105,1042,1003,2193,3110,1105,1039,1003,2192,3110,1106,1037,1003,2192,3110
                ,1105,1037,1004,2192,3110,1105,1037,1027,2192,3116,1105,1036,1179,2192,3130,1105
                ,1024,1285,2192,3165,1106,975,1394,2192,3248,1106,901,1497,2192,3313,1103,877,1635
                ,2192,3338,1101,877,1809,2192,3370,1100,866,1988,2192,3394,1092,865,2167,2192,3409
                ,1078,870,2344,2192,3409,1050,871,2426,2192,3408,1033,866,2429,2192,3388,1033,872,2405
                ,2192,3348,1039,892,2382,2192,3274,1062,964,2376,2193,3178,1117,1051,2371,2193,3104,1129
                ,1083,2402,2192,3095,1113,1084,2413,2193,3072,1112,1141,2421,2193,2998,1115,1208,2464
                ,2192,2971,1116,1218,2469,2193,2970,1116,1217,2469,2193,2968,1117,1218,2479,2193,2969
                ,1117,1220,2489,2193,2971,1114,1222,2501,2193,2971,1112,1222,2520,2282,2974,1109,1223
                ,2582,2458,2977,1108,1222,2617,2497,2975,1107,1223,2638,2634,2975,1106,1223,2639,2635
                ,2975,1101,1222,2640,2645,2978,1099,1222,2650,2652,3001,1099,1206,2684,2663,3032,1097
                ,1187,2689,2672,3080,1086,1137,2701,2680,3148,1073,1078,2723,2685,3209,1057,1039,2728
                ,2685,3267,1054,1010,2765,2686,3333,1052,972,2802,2685,3393,1046,951,2837,2685,3436,1041
                ,950,2867,2685,3479,1035,941,2929,2686,3547,1035,920,2974,2686,3627,1034,891,3004,2686
                ,3720,1033,853,3013,2686,3786,1031,844,2972,2686,3797,1027,843,2917,2686,3803,1011,838
                ,2864,2686,3839,1004,799,2813,2686,3904,1003,773,2747,2686,3892,1003,772,2640,2686,3868
                ,1002,772,2527,2686,3836,1002,772,2394,2686,3801,1002,772,2278,2686,3762,1002,771,2157
                ,2686,3698,1002,772,2010,2686,3625,1005,775,1884,2686,3558,1010,798,1804,2686,3468,1032
                ,874,1742,2685,3367,1043,937,1684,2686,3287,1049,991,1620,2685,3203,1057,1059,1588,2685
                ,3136,1052,1104,1573,2685,3096,1054,1130,1535,2686,3068,1052,1148,1521,2685,3038,1052,1172
                ,1499,2686,3008,1054,1188,1500,2684,3000,1051,1188,1515,2684,2998,1051,1188,1512,2683
                ,2995,1051,1194,1484,2683,2978,1051,1204,1485,2683,2955,1051,1239,1482,2683,2912,1050
                ,1287,1476,2682,2889,1051,1300,1477,2682,2889,1050,1298,1476,2681,2889,1050,1296,1473
                ,2681,2889,1048,1295,1451,2680,2887,1047,1293,1431,2680,2886,1044,1293,1437,2679,2885
                ,1044,1293,1452,2678,2885,1044,1293,1459,2678,2884,1044,1294,1461,2678,2885,1044,1293
                ,1461,2676,2884,1044,1291,1459,2531,2884,1044,1286,1421,2369,2885,1041,1273,1425,2361
                ,2891,1041,1272,1424,2355,2891,1041,1270,1422,2355,2891,1041,1274,1420,2355,2891,1037
                ,1270,1418,2355,2897,1040,1256,1434,2356,2944,1042,1169,1444,2356,3037,1042,1064,1446
                ,2356,3122,1041,982,1449,2356,3179,1041,935,1453,2356,3227,1044,872,1464,2355,3286,1044
                ,808,1473,2356,3341,1052,777,1476,2355,3350,1057,777,1479,2356,3350,1057,773,1480,2355
                ,3347,1057,771,1497,2355,3344,1059,770,1522,2356,3339,1059,770,1537,2356,3320,1056,771
                ,1528,2357,3292,1059,784,1479,2358,3240,1054,829,1421,2360,3144,1054,917,1344,2360
                ,3050,1054,994,1275,2362,2980,1050,1053,1216,2365,2949,1049,1075,1182,2422,2943,1049
                ,1074,1158,2559,2942,1049,1075,1143,2621,2943,1049,1076,1127,2622,2945,1049,1085,1104
                ,2622,2945,1049,1091,1080,2623,2955,1047,1085,1073,2622,2985,1047,1070,1074,2622,3028
                ,1046,1037,1077,2622,3061,1042,1028,1082,2622,3062,1042,1028,1083,2622,3063,1042,1028
                ,1083,2622,3063,1047,1028,1083,2622,3063,1047,1029,1083,2622,3063,1048,1028,1083,2622
                ,3062,1048,1028,1084,2622,3063,1048,1031,1083,2622,3071,1049,1027,1083,2621,3070,1049
                ,1027,1083,2622,3068,1049,1026,1083,2622]
    
    '''
    
    
    integers = [3082,1095,1061,1050,2190,3081,1095,1061,1049,2189,3082,1095,1062,1049,2190,3082,1095,1063,1049,2190,3081,1095,1063,1050,2190,3082,1095,1062,1050,2190,3082,1095,1059,1050,2190,3082,1096,1059,1050,2190,3082,1095,1059,1049,2190,3082,1096,1057,1057,2190,3081,1095,1057,1061,2190,3082,1095,1058,1083,2190,3083,1096,1057,1148,2190,3087,1096,1058,1167,2190,3088,1096,1058,1173,2190,3089,1096,1057,1192,2190,3091,1095,1057,1229,2190,3097,1096,1056,1274,2190,3105,1096,1044,1318,2190,3129,1096,1012,1400,2190,3170,1096,982,1446,2190,3192,1096,973,1497,2190,3198,1096,973,1537,2190,3207,1095,966,1569,2190,3227,1096,949,1603,2190,3247,1096,934,1639,2190,3259,1095,931,1671,2190,3266,1095,926,1718,2190,3277,1094,926,1758,2190,3286,1095,926,1803,2190,3294,1094,925,1836,2190,3303,1093,923,1876,2190,3311,1095,923,1910,2190,3318,1091,923,1949,2189,3321,1090,927,1978,2190,3321,1090,933,2013,2190,3321,1090,938,2050,2190,3321,1090,941,2093,2190,3321,1090,945,2129,2190,3322,1093,953,2153,2190,3321,1092,956,2179,2189,3321,1090,964,2222,2190,3321,1090,967,2246,2190,3321,1093,969,2267,2190,3321,1095,972,2299,2190,3320,1095,972,2303,2190,3317,1095,970,2304,2190,3314,1096,971,2303,2190,3306,1096,972,2303,2190,3305,1097,973,2309,2190,3305,1097,972,2311,2190,3305,1097,973,2312,2190,3305,1097,975,2333,2190,3308,1097,976,2353,2190,3308,1097,976,2369,2190,3305,1095,976,2392,2190,3304,1097,976,2402,2190,3300,1097,978,2403,2190,3284,1103,991,2409,2190,3277,1130,993,2409,2190,3270,1131,997,2409,2190,3254,1136,1014,2414,2190,3231,1136,1034,2429,2190,3215,1136,1046,2429,2190,3209,1136,1050,2429,2190,3202,1136,1050,2429,2190,3193,1135,1061,2428,2190,3154,1136,1101,2428,2190,3113,1135,1122,2428,2190,3104,1135,1122,2428,2190,3101,1135,1122,2428,2190,3096,1135,1122,2426,2190,3095,1134,1122,2421,2190,3087,1133,1126,2418,2190,3084,1136,1126,2418,2190,3083,1135,1126,2411,2190,3077,1136,1128,2407,2190,3073,1136,1137,2398,2190,3051,1136,1164,2398,2190,3022,1136,1173,2398,2190,3018,1136,1175,2397,2190,3005,1136,1194,2398,2190,2984,1136,1210,2405,2190,2974,1135,1218,2426,2190,2963,1133,1242,2442,2190,2940,1133,1267,2454,2190,2930,1132,1273,2465,2190,2929,1134,1282,2468,2191,2919,1134,1295,2476,2193,2908,1133,1302,2484,2211,2907,1132,1305,2510,2288,2907,1132,1307,2530,2304,2907,1133,1308,2541,2312,2907,1132,1310,2557,2353,2906,1133,1314,2569,2361,2894,1132,1335,2590,2363,2872,1131,1358,2610,2378,2866,1131,1363,2633,2424,2866,1128,1365,2649,2442,2867,1127,1370,2680,2468,2867,1127,1371,2705,2520,2868,1126,1371,2722,2552,2866,1125,1373,2732,2569,2866,1125,1373,2745,2593,2866,1124,1373,2749,2597,2866,1122,1374,2755,2605,2866,1120,1374,2757,2610,2866,1119,1374,2758,2616,2866,1116,1374,2760,2624,2867,1115,1374,2763,2632,2869,1112,1374,2768,2638,2873,1111,1374,2782,2643,2881,1111,1374,2797,2647,2886,1111,1374,2805,2648,2888,1111,1374,2814,2648,2894,1111,1374,2826,2650,2901,1111,1371,2837,2652,2909,1111,1374,2852,2654,2917,1111,1370,2866,2655,2924,1111,1367,2869,2657,2933,1109,1348,2864,2658,2967,1108,1298,2845,2661,2999,1108,1269,2844,2663,3017,1107,1252,2843,2664,3025,1108,1245,2853,2664,3034,1108,1243,2859,2665,3037,1110,1243,2866,2668,3046,1111,1243,2875,2671,3056,1112,1243,2890,2675,3065,1112,1243,2913,2677,3073,1111,1243,2920,2677,3080,1112,1243,2933,2678,3089,1113,1243,2945,2678,3102,1113,1243,2960,2678,3111,1113,1243,2969,2678,3120,1111,1239,2979,2678,3137,1108,1222,2979,2678,3160,1108,1202,2978,2678,3184,1108,1176,2972,2678,3222,1107,1138,2969,2678,3258,1103,1111,2961,2678,3277,1099,1095,2953,2678,3294,1097,1080,2951,2679,3321,1094,1058,2944,2678,3347,1089,1041,2940,2678,3369,1083,1015,2935,2678,3410,1075,982,2929,2678,3441,1071,973,2923,2678,3443,1068,971,2918,2679,3462,1067,953,2918,2679,3492,1066,925,2917,2678,3531,1061,895,2916,2678,3562,1059,873,2915,2678,3590,1055,853,2915,2678,3621,1053,828,2915,2678,3654,1049,805,2910,2678,3680,1046,789,2902,2678,3698,1036,778,2894,2678,3713,1022,776,2886,2678,3723,1012,775,2874,2678,3733,1006,772,2872,2678,3748,1006,771,2875,2678,3756,1006,771,2875,2678,3770,1006,771,2876,2678,3785,1005,771,2879,2678,3793,1005,771,2883,2678,3808,1004,771,2886,2679,3820,1004,771,2886,2678,3829,1004,770,2883,2678,3843,1004,771,2874,2678,3851,1002,772,2851,2678,3852,996,771,2827,2678,3852,992,772,2806,2678,3852,988,772,2785,2678,3852,982,771,2755,2678,3852,979,771,2730,2678,3848,979,770,2695,2678,3847,977,770,2662,2678,3846,977,769,2622,2678,3837,976,769,2577,2678,3825,977,769,2532,2678,3820,977,769,2499,2678,3815,976,769,2460,2678,3807,977,768,2405,2678,3792,976,769,2357,2678,3776,976,769,2309,2678,3756,976,769,2262,2678,3738,970,769,2235,2678,3730,971,769,2202,2678,3715,970,769,2170,2678,3702,970,769,2138,2678,3686,973,769,2106,2678,3674,975,769,2077,2678,3659,976,769,2045,2678,3647,980,769,2019,2678,3635,984,769,1999,2678,3622,990,770,1982,2678,3608,993,774,1963,2678,3593,995,779,1942,2678,3573,997,797,1932,2678,3537,997,831,1929,2678,3499,1000,867,1901,2678,3457,1005,891,1878,2678,3435,1011,899,1839,2678,3418,1015,913,1812,2677,3377,1021,948,1783,2678,3336,1027,977,1767,2677,3309,1035,997,1757,2677,3297,1039,1004,1739,2677,3285,1039,1010,1726,2677,3265,1038,1028,1714,2677,3240,1039,1044,1702,2677,3229,1039,1049,1689,2677,3211,1041,1069,1676,2677,3183,1042,1089,1669,2676,3167,1042,1096,1654,2677,3157,1042,1105,1640,2677,3135,1042,1121,1625,2676,3118,1043,1130,1625,2676,3112,1042,1131,1619,2677,3105,1043,1138,1611,2677,3091,1043,1152,1606,2676,3083,1049,1155,1607,2676,3081,1049,1155,1608,2676,3080,1049,1154,1608,2675,3079,1046,1155,1606,2675,3078,1044,1155,1606,2675,3078,1044,1154,1605,2674,3078,1043,1155,1605,2671,3078,1044,1151,1609,2664,3082,1045,1151,1611,2657,3079,1047,1154,1611,2653,3078,1049,1152,1611,2640,3078,1048,1152,1607,2635,3078,1049,1151,1607,2629,3081,1049,1149,1593,2598,3081,1047,1149,1573,2532,3078,1047,1148,1570,2524,3078,1047,1146,1574,2485,3077,1047,1144,1574,2446,3078,1046,1144,1573,2412,3080,1045,1144,1571,2371,3079,1046,1144,1572,2322,3081,1047,1142,1571,2264,3081,1046,1141,1569,2220,3082,1046,1138,1569,2146,3082,1046,1139,1566,2103,3082,1045,1139,1563,2031,3082,1045,1138,1559,1981,3082,1044,1138,1559,1878,3082,1044,1138,1556,1845,3082,1044,1138,1559,1769,3083,1045,1138,1555,1724,3082,1044,1138,1548,1724,3078,1043,1134,1537,1724,3075,1044,1135,1519,1725,3076,1043,1131,1516,1725,3075,1046,1126,1511,1724,3081,1048,1119,1513,1725,3105,1049,1067,1519,1724,3163,1048,1009,1511,1724,3204,1049,968,1474,1725,3220,1047,940,1452,1725,3230,1046,912,1400,1724,3236,1045,895,1385,1725,3237,1049,885,1349,1725,3236,1049,867,1306,1724,3231,1049,857,1280,1725,3217,1057,860,1237,1725,3191,1058,870,1220,1724,3171,1058,896,1195,1725,3131,1059,942,1172,1725,3085,1059,981,1152,1725,3054,1059,998,1132,1724,3046,1059,1000,1105,1725,3045,1059,1000,1071,1724,3037,1059,1006,1059,1725,3015,1059,1046,1054,1725,2973,1059,1098,1032,1725,2936,1059,1124,1024,1725,2931,1060,1124,1019,1725,2928,1060,1123,989,1725,2925,1059,1124,964,1725,2925,1059,1124,964,1724,2919,1059,1127,964,1725,2911,1060,1136,964,1725,2910,1060,1138,964,1725,2903,1060,1138,961,1725,2902,1061,1139,960,1725,2904,1064,1141,960,1725,2901,1066,1144,960,1725,2898,1066,1144,960,1725]
    
    
    
    
    i = 0
    
    arr_length = len(integers)
    

    
    
    
    ADDR_TORQUE_ENABLE          = 64
    ADDR_GOAL_POSITION          = 116
    ADDR_PRESENT_POSITION       = 132
    DXL_MINIMUM_POSITION_VALUE  = 1         # Refer to the Minimum Position Limit of product eManual
    DXL_MAXIMUM_POSITION_VALUE  = 4094      # Refer to the Maximum Position Limit of product eManual
    BAUDRATE                    = 9600
    
    # DYNAMIXEL Protocol Version (1.0 / 2.0)
    # https://emanual.robotis.com/docs/en/dxl/protocol2/
    PROTOCOL_VERSION            = 2.0
    
    # Factory default ID of all DYNAMIXEL is 1
    DXL1_ID                     = 1
    DXL2_ID                     = 2
    DXL3_ID                     = 3
    DXL4_ID                     = 4
    DXL5_ID                     = 5
    # Use the actual port assigned to the U2D2.
    # ex) Windows: "COM*", Linux: "/dev/ttyUSB*", Mac: "/dev/tty.usbserial-*"
    DEVICENAME                  = 'COM7'
    
    TORQUE_ENABLE               = 1     # Value for enabling the torque
    TORQUE_DISABLE              = 0     # Value for disabling the torque
    DXL_MOVING_STATUS_THRESHOLD = 20    # Dynamixel moving status threshold
    
    index = 0
    
    dxl_goal_position1 = [1024, 3072]         # Goal position
    dxl_goal_position2 = [2000, 900]
    dxl_goal_position3 = [3000, 800]         # Goal position
    dxl_goal_position4 = [3100, 1050]
    dxl_goal_position5 = [2800, 1800]
    
    
    # Initialize PortHandler instance
    # Set the port path
    # Get methods and members of PortHandlerLinux or PortHandlerWindows
    portHandler = PortHandler(DEVICENAME)
    
    # Initialize PacketHandler instance
    # Set the protocol version
    # Get methods and members of Protocol1PacketHandler or Protocol2PacketHandler
    packetHandler = PacketHandler(PROTOCOL_VERSION)
    

    # Open port
    if portHandler.openPort():
        print("Succeeded to open the port")
    else:
        print("Failed to open the port")
        print("Press any key to terminate...")
        getch()
        quit()
    
    
    # Set port baudrate
    if portHandler.setBaudRate(BAUDRATE):
        print("Succeeded to change the baudrate")
    else:
        print("Failed to change the baudrate")
        print("Press any key to terminate...")
        getch()
        quit()
    
    
    
    # Enable Dynamixel Torque
    dxl_comm_result1, dxl_error1 = packetHandler.write1ByteTxRx(portHandler, DXL1_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
    dxl_comm_result2, dxl_error2 = packetHandler.write1ByteTxRx(portHandler, DXL2_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
    dxl_comm_result3, dxl_error3 = packetHandler.write1ByteTxRx(portHandler, DXL3_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
    dxl_comm_result4, dxl_error4 = packetHandler.write1ByteTxRx(portHandler, DXL4_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
    dxl_comm_result5, dxl_error5 = packetHandler.write1ByteTxRx(portHandler, DXL5_ID, ADDR_TORQUE_ENABLE, TORQUE_ENABLE)
    
    
    
    
    '''
    
    
    if dxl_comm_result1 != COMM_SUCCESS:
        print("%s" % packetHandler.getTxRxResult(dxl_comm_result1))
    elif dxl_error1 != 0:
        print("%s" % packetHandler.getRxPacketError(dxl_error1))
    else:
        print("Dynamixel has been successfully connected")
    
    '''
    
    
    '''
    dxl_present_position1, dxl_comm_result1, dxl_error1 = packetHandler.read4ByteTxRx(portHandler, DXL1_ID, ADDR_PRESENT_POSITION)
    dxl_present_position2, dxl_comm_result2, dxl_error2 = packetHandler.read4ByteTxRx(portHandler, DXL2_ID, ADDR_PRESENT_POSITION)
    dxl_present_position3, dxl_comm_result3, dxl_error3 = packetHandler.read4ByteTxRx(portHandler, DXL3_ID, ADDR_PRESENT_POSITION)
    dxl_present_position4, dxl_comm_result4, dxl_error4 = packetHandler.read4ByteTxRx(portHandler, DXL4_ID, ADDR_PRESENT_POSITION)
    dxl_present_position5, dxl_comm_result5, dxl_error5 = packetHandler.read4ByteTxRx(portHandler, DXL5_ID, ADDR_PRESENT_POSITION)
    
    MX1 = dxl_present_position1
    MX2 = dxl_present_position2
    MX3 = dxl_present_position3
    MX4 = dxl_present_position4
    MX5 = dxl_present_position5
    
    '''
    
    
    '''
    dxl_comm_result1, dxl_error1 = packetHandler.write4ByteTxRx(portHandler, DXL1_ID, ADDR_GOAL_POSITION, integers[0])
    dxl_comm_result2, dxl_error2 = packetHandler.write4ByteTxRx(portHandler, DXL2_ID, ADDR_GOAL_POSITION, integers[1])
    dxl_comm_result3, dxl_error3 = packetHandler.write4ByteTxRx(portHandler, DXL3_ID, ADDR_GOAL_POSITION, integers[2])
    dxl_comm_result4, dxl_error4 = packetHandler.write4ByteTxRx(portHandler, DXL4_ID, ADDR_GOAL_POSITION, integers[3])
    dxl_comm_result5, dxl_error5 = packetHandler.write4ByteTxRx(portHandler, DXL5_ID, ADDR_GOAL_POSITION, integers[4])
    '''
    
    
    while 1:
        dxl_comm_result1, dxl_error1 = packetHandler.write4ByteTxRx(portHandler, DXL1_ID, ADDR_GOAL_POSITION, integers[0])
        dxl_comm_result2, dxl_error2 = packetHandler.write4ByteTxRx(portHandler, DXL2_ID, ADDR_GOAL_POSITION, integers[1])
        dxl_comm_result3, dxl_error3 = packetHandler.write4ByteTxRx(portHandler, DXL3_ID, ADDR_GOAL_POSITION, integers[2])
        dxl_comm_result4, dxl_error4 = packetHandler.write4ByteTxRx(portHandler, DXL4_ID, ADDR_GOAL_POSITION, integers[3])
        dxl_comm_result5, dxl_error5 = packetHandler.write4ByteTxRx(portHandler, DXL5_ID, ADDR_GOAL_POSITION, integers[4])
        print("Press any key to terminate...")
        if getch() == chr(0x1b):
            break
    
    
    
    while 1:
        # if getch() == chr(0x1b):
        #     break
        if i == arr_length-5:
            break
    
        dxl_comm_result1, dxl_error1 = packetHandler.write4ByteTxRx(portHandler, DXL1_ID, ADDR_GOAL_POSITION, integers[i])
        dxl_comm_result2, dxl_error2 = packetHandler.write4ByteTxRx(portHandler, DXL2_ID, ADDR_GOAL_POSITION, integers[i+1])
        dxl_comm_result3, dxl_error3 = packetHandler.write4ByteTxRx(portHandler, DXL3_ID, ADDR_GOAL_POSITION, integers[i+2])
        dxl_comm_result4, dxl_error4 = packetHandler.write4ByteTxRx(portHandler, DXL4_ID, ADDR_GOAL_POSITION, integers[i+3])
        dxl_comm_result5, dxl_error5 = packetHandler.write4ByteTxRx(portHandler, DXL5_ID, ADDR_GOAL_POSITION, integers[i+4])
        
        #time.sleep(100/1000)
        i = i + 5
    
        
        
    '''
    # Disable Dynamixel Torque
    dxl_comm_result1, dxl_error1 = packetHandler.write1ByteTxRx(portHandler, DXL1_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    dxl_comm_result2, dxl_error2 = packetHandler.write1ByteTxRx(portHandler, DXL2_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    dxl_comm_result3, dxl_error3 = packetHandler.write1ByteTxRx(portHandler, DXL3_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    dxl_comm_result4, dxl_error4 = packetHandler.write1ByteTxRx(portHandler, DXL4_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    dxl_comm_result5, dxl_error5 = packetHandler.write1ByteTxRx(portHandler, DXL5_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    '''
    
    
    
    
    
    if dxl_comm_result1 != COMM_SUCCESS:
        print("%s" % packetHandler.getTxRxResult(dxl_comm_result1))
    elif dxl_error1!= 0:
        print("%s" % packetHandler.getRxPacketError(dxl_error1))
    
    # Close port
    portHandler.closePort()

except KeyboardInterrupt:
   
    # Disable Dynamixel Torque
    dxl_comm_result1, dxl_error1 = packetHandler.write1ByteTxRx(portHandler, DXL1_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    dxl_comm_result2, dxl_error2 = packetHandler.write1ByteTxRx(portHandler, DXL2_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    dxl_comm_result3, dxl_error3 = packetHandler.write1ByteTxRx(portHandler, DXL3_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    dxl_comm_result4, dxl_error4 = packetHandler.write1ByteTxRx(portHandler, DXL4_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    dxl_comm_result5, dxl_error5 = packetHandler.write1ByteTxRx(portHandler, DXL5_ID, ADDR_TORQUE_ENABLE, TORQUE_DISABLE)
    
    
    
    
    
    
    if dxl_comm_result1 != COMM_SUCCESS:
        print("%s" % packetHandler.getTxRxResult(dxl_comm_result1))
    elif dxl_error1!= 0:
        print("%s" % packetHandler.getRxPacketError(dxl_error1))
    
    # Close port
    portHandler.closePort()


